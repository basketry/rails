# This code was generated by @basketry/rails@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/rails: https://github.com/basketry/rails#readme

# typed: strict

module BasketryExample
  module BaseControllerInterface
    extend T::Sig
    extend T::Helpers

    interface!

    sig { abstract.returns(BasketryExample::V1::Utils::ServiceLocator) }
    def services
    end

    sig { abstract.params(errors: T::Array[T.untyped]).returns(T.nilable(Integer)) }
    def status_code(errors)
    end
  end
end

# The following template can be used to create an implementation of BaseControllerInterface.
# Note that if the original service definition is updated, this template may also be
# updated; however, your implementation will remain as-is. In such a case, you will need
# to manually update your implementation to match the BaseControllerInterface interface.

# class BaseController < ApplicationController
#   extend T::Sig
#
#   include BasketryExample::BaseControllerInterface
#
#   sig { override.returns(BasketryExample::V1::Utils::ServiceLocator) }
#   def services
#     raise NotImplementedError
#   end
#
#   sig { override.params(errors: T::Array[T.untyped]).returns(T.nilable(Integer)) }
#   def status_code(errors)
#     raise NotImplementedError
#   end
# end
